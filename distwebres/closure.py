# -*- coding: utf-8 -*-
import os
import sys
from datetime import datetime
from pkg_resources import resource_filename
from distutils.cmd import Command
from distutils.errors import DistutilsError, DistutilsOptionError

class closure(Command):
    # Brief (40-50 characters) description of the command
    description = ""

    # List of option tuples: long name, short name (None if no short
    # name), and help string.
    user_options = [
        ('root=', None, 'closure-library root directory'),
        ('project=', None, 'main JS project directory'),
        ('deps=', None, 'JS dependency generated file for project'),
        ('minified=', None, 'minified JS file to generate'),
        ('inputs=', None, 'additionnal JS input directories'),
        ('namespaces=', None, ('declared namespaces to take in account '
                              'for minification')),
        ('output-mode=', None, 'output mode: compiled(default), script, list'),
        ('compiler-jar=', None, 'path to closure.jar'),
        ('compiler-flags=', None, 'optional flags to pass to closure.jar'),
        ]

    _VALID_OUTPUT_MODES = ('compiled', 'script', 'list')

    def initialize_options(self):
        self.root = None
        self.project = None
        self.deps = None
        self.minified = None
        self.inputs = ""
        self.namespaces = ""
        self.output_mode = None
        self.compiler_jar = None
        self.compiler_flags = ""

    def finalize_options(self):
        from distutils import log
        package_name = self.distribution.metadata.name
        is_dir = self.ensure_dirname

        for name, validate in (('root', is_dir) ,
                               ('project', is_dir),):
            val = resource_filename(package_name, getattr(self, name))
            setattr(self, name, val)
            validate(name)

        # deps and minified are generated files: don't validate existence
        self.deps = resource_filename(package_name, self.deps)
        self.minified = resource_filename(package_name, self.minified)

        self.inputs = [resource_filename(package_name, filename)
                       for filename in self.inputs.split()]
        for filename in self.inputs:
            if not os.path.isfile(filename):
                msg = ("error in 'inputs' option: %s does not exists or is "
                       "not a directory" % (filename,))
                log.error(msg)
                raise DistutilsOptionError, msg


        closure_tools_path = os.path.join(self.root, 'closure', 'bin', 'build')
        sys.path.append(closure_tools_path)
        try:
            import closurebuilder
        except ImportError:
            msg = ("root=%s is not the root of closure library: cannot find "
                   "closurebuilder.py in %s" % (self.root, closure_tools_path))
            log.error(msg)
            raise DistutilsOptionError, msg

        self.namespaces = frozenset(self.namespaces.split())

        if self.compiler_jar is None:
            self.compiler_jar = resource_filename(
                'distwebres',
                'resources/closure/compiler.jar')
        else:
            self.compiler_jar = os.path.abspath(self.compiler_jar)

        self.ensure_filename('compiler_jar')

        if self.output_mode is None:
            self.output_mode = self._VALID_OUTPUT_MODES[0]
        elif self.output_mode not in self._VALID_OUTPUT_MODES:
            msg = (
                'Invalid output-mode: %s, valid values are: %s' %
                ', '.join(['"%s"' % mode for mode in self._VALID_OUTPUT_MODES]))
            log.error(msg)
            raise DistutilsOptionError, msg

    def run (self):
        self.build_deps()
        self.build_minified()

    def build_deps(self):
        import depswriter
        path_to_source = depswriter._GetRelativePathToSourceDict(self.project)
        out = open(self.deps, 'w')
        out.write('// This file was autogenerated by closure depswriter %s.\n'
                  % datetime.now().replace(microsecond=0).isoformat(' '))
        out.write('// Please do not edit.\n')
        out.write(depswriter.MakeDepsFile(path_to_source))
        out.close()

    def build_minified(self):
        from distutils import log
        import closurebuilder
        import treescan
        import depstree
        log.info('Building minified script "%s", mode: %s',
                 self.minified, self.output_mode)
        log.info('Scanning paths...')
        sources = set(
            (closurebuilder._PathSource(js_path)
             for path in (self.root, self.project,)
             for js_path in treescan.ScanTreeForJsFiles(path)
            ))

        log.info('%s sources scanned.', len(sources))
        log.info('Building dependency tree..')
        tree = depstree.DepsTree(sources)

        input_namespaces = set(self.namespaces)

        for input_path in self.inputs:
            js_input = closurebuilder._GetInputByPath(input_path, sources)
            if not js_input:
                msg = 'No source matched input %s' % input_path
                log.error(msg)
                raise DistutilsError, msg

            input_namespaces.update(js_input.provides)

        if not input_namespaces:
            msg = ('No namespaces found. At least one namespace must be '
                   'specified with the --namespaces or --inputs flags.')
            log.error(msg)
            raise DistutilsError, msg

        base = closurebuilder._GetClosureBaseFile(sources)
        deps = [base] + tree.GetDependencies(input_namespaces)

        if self.output_mode == 'list':
            log.info('Listing files:')
            log.info('\n'.join([js_source.GetPath() for js_source in deps]))
            log.info('Build successful!')
            return

        out = open(self.minified, 'w')

        if self.output_mode == 'script':
            out.writelines([js_source.GetSource() for js_source in deps])
            out.close()
            log.info('Build successful!')
            return

        import jscompiler
        compiled_source = jscompiler.Compile(
            self.compiler_jar,
            [js_source.GetPath() for js_source in deps],
            self.compiler_flags)

        if compiled_source is None:
            msg = 'JavaScript compilation failed.'
            log.error(msg)
            raise DistutilsError, msg
        else:
            log.info('JavaScript compilation succeeded.')
            out.write(compiled_source)
            log.info('Build successful!')

        out.close()
