# -*- coding: utf-8 -*-
import os
import sys
from datetime import datetime
from pkg_resources import resource_filename
from distutils.cmd import Command
from distutils.errors import DistutilsOptionError

class closure(Command):
    # Brief (40-50 characters) description of the command
    description = ""

    # List of option tuples: long name, short name (None if no short
    # name), and help string.
    user_options = [
        ('root=', None, 'closure-library root directory'),
        ('project=', None, 'main JS project directory'),
        ('deps=', None, 'JS dependency generated file for project'),
        ('minified=', None, 'minified JS file to generate'),
        ('inputs=', None, 'additionnal JS input directories'),
        ('namespaces=', None, ('declared namespaces to take in account '
                              'for minification')),
        ('compiler-jar=', None, 'path to closure.jar')
        ]

    def initialize_options(self):
        self.root = None
        self.project = None
        self.deps = None
        self.minified = None
        self.inputs = ""
        self.namespaces = None
        self.compiler_jar = None

    def finalize_options(self):
        package_name = self.distribution.metadata.name
        is_dir = self.ensure_dirname

        for name, validate in (('root', is_dir) ,
                               ('project', is_dir),):
            val = resource_filename(package_name, getattr(self, name))
            setattr(self, name, val)
            validate(name)

        # deps and minified are generated files: don't validate existence
        self.deps = resource_filename(package_name, self.deps)
        self.minified = resource_filename(package_name, self.minified)

        self.ensure_string_list('inputs')
        self.inputs = [resource_filename(package_name, dirname)
                       for dirname in self.inputs]
        for dirname in self.inputs:
            if not os.path.isdir(dirname):
                raise (DistutilsOptionError,
                       ("error in 'inputs' option: %s does not exists or is "
                        "not a directory") % (val,))

        closure_tools_path = os.path.join(self.root, 'closure', 'bin', 'build')
        sys.path.append(closure_tools_path)
        try:
            import closurebuilder
        except ImportError:
            raise DistutilsOptionError, (
                   "root=%s is not the root of closure library: cannot find "
                   "closurebuilder.py in %s" % (self.root, closure_tools_path))

        self.ensure_string_list('namespaces')

        if self.compiler_jar is None:
            self.compiler_jar = resource_filename(
                'distwebres',
                'resources/closure/compiler.jar')
        else:
            self.compiler_jar = os.path.abspath(self.compiler_jar)

        self.ensure_filename('compiler_jar')

    def run (self):
        self.build_deps()

    def build_deps(self):
        import depswriter
        path_to_source = depswriter._GetRelativePathToSourceDict(self.project)
        out = open(self.deps, 'w')
        out.write('// This file was autogenerated by closure depswriter %s.\n'
                  % datetime.now().replace(microsecond=0).isoformat(' '))
        out.write('// Please do not edit.\n')
        out.write(depswriter.MakeDepsFile(path_to_source))
        out.close()


